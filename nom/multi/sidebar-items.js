initSidebarItems({"fn":[["count","Runs the embedded parser a specified number of times. Returns the results in a `Vec`. # Arguments * `f` The parser to apply. * `count` How often to apply the parser. ```rust # #[macro_use] extern crate nom; # use nom::{Err, error::ErrorKind, Needed, IResult}; use nom::multi::count; use nom::bytes::complete::tag;"],["fold_many0","Applies a parser until it fails and accumulates the results using a given function and initial value. # Arguments * `f` The parser to apply. * `init` The initial value. * `g` The function that combines a result of `f` with       the current accumulator. ```rust # #[macro_use] extern crate nom; # use nom::{Err, error::ErrorKind, Needed, IResult}; use nom::multi::fold_many0; use nom::bytes::complete::tag;"],["fold_many1","Applies a parser until it fails and accumulates the results using a given function and initial value. Fails if the embedded parser does not succeed at least once. # Arguments * `f` The parser to apply. * `init` The initial value. * `g` The function that combines a result of `f` with       the current accumulator. ```rust # #[macro_use] extern crate nom; # use nom::{Err, error::ErrorKind, Needed, IResult}; use nom::multi::fold_many1; use nom::bytes::complete::tag;"],["fold_many_m_n","Applies a parser `n` times or until it fails and accumulates the results using a given function and initial value. Fails if the embedded parser does not succeed at least `m` times. # Arguments * `m` The minimum number of iterations. * `n` The maximum number of iterations. * `f` The parser to apply. * `init` The initial value. * `g` The function that combines a result of `f` with       the current accumulator. ```rust # #[macro_use] extern crate nom; # use nom::{Err, error::ErrorKind, Needed, IResult}; use nom::multi::fold_many_m_n; use nom::bytes::complete::tag;"],["length_data","Gets a number from the parser and returns a subslice of the input of that size. If the parser returns Incomplete, length_data will return an error. # Arguments * `f` The parser to apply. ```rust # #[macro_use] extern crate nom; # use nom::{Err, error::ErrorKind, Needed, IResult}; # use nom::Needed::Size; use nom::number::complete::be_u16; use nom::multi::length_data; use nom::bytes::complete::tag;"],["length_value","Gets a number from the first parser, takes a subslice of the input of that size, then applies the second parser on that subslice. If the second parser returns Incomplete, length_value will return an error. # Arguments * `f` The parser to apply. ```rust # #[macro_use] extern crate nom; # use nom::{Err, error::ErrorKind, Needed, IResult}; # use nom::Needed::Size; use nom::number::complete::be_u16; use nom::multi::length_value; use nom::bytes::complete::tag;"],["many0","Repeats the embedded parser until it fails and returns the results in a `Vec`."],["many0_count","Repeats the embedded parser until it fails and returns the number of successful iterations. # Arguments * `f` The parser to apply. ```rust # #[macro_use] extern crate nom; # use nom::{Err, error::ErrorKind, Needed, IResult}; use nom::multi::many0_count; use nom::bytes::complete::tag;"],["many1","Runs the embedded parser until it fails and returns the results in a `Vec`. Fails if the embedded parser does not produce at least one result."],["many1_count","Repeats the embedded parser until it fails and returns the number of successful iterations. Fails if the embedded parser does not succeed at least once. # Arguments * `f` The parser to apply. ```rust # #[macro_use] extern crate nom; # use nom::{Err, error::ErrorKind, Needed, IResult}; use nom::multi::many1_count; use nom::bytes::complete::tag;"],["many_m_n","Repeats the embedded parser `n` times or until it fails and returns the results in a `Vec`. Fails if the embedded parser does not succeed at least `m` times. # Arguments * `m` The minimum number of iterations. * `n` The maximum number of iterations. * `f` The parser to apply. ```rust # #[macro_use] extern crate nom; # use nom::{Err, error::ErrorKind, Needed, IResult}; use nom::multi::many_m_n; use nom::bytes::complete::tag;"],["many_till","Applies the parser `f` until the parser `g` produces a result. Returns a pair consisting of the results of `f` in a `Vec` and the result of `g`. ```rust # use nom::{Err, error::ErrorKind, Needed, IResult}; use nom::multi::many_till; use nom::bytes::complete::tag;"],["separated_list","Alternates between two parsers to produce a list of elements. # Arguments * `sep` Parses the separator between list elements. * `f` Parses the elements of the list."],["separated_nonempty_list","Alternates between two parsers to produce a list of elements. Fails if the element parser does not produce at least one element. # Arguments * `sep` Parses the separator between list elements. * `f` Parses the elements of the list. ```rust # #[macro_use] extern crate nom; # use nom::{Err, error::ErrorKind, Needed, IResult}; use nom::multi::separated_nonempty_list; use nom::bytes::complete::tag;"]]});